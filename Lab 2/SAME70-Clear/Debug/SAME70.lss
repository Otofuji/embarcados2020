
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000994  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20400000  00400994  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b0  2040043c  00400dd0  0002043c  2**2
                  ALLOC
  3 .stack        00002004  204004ec  00400e80  0002043c  2**0
                  ALLOC
  4 .heap         00000200  204024f0  00402e84  0002043c  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000aef1  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001855  00000000  00000000  0002b3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000023c4  00000000  00000000  0002cc09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000568  00000000  00000000  0002efcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000630  00000000  00000000  0002f535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bf7f  00000000  00000000  0002fb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000688c  00000000  00000000  0004bae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088eab  00000000  00000000  00052370  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000cac  00000000  00000000  000db21c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	f0 24 40 20 d9 04 40 00 d5 04 40 00 d5 04 40 00     .$@ ..@...@...@.
  400010:	d5 04 40 00 d5 04 40 00 d5 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d5 04 40 00 d5 04 40 00 00 00 00 00 d5 04 40 00     ..@...@.......@.
  40003c:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  40004c:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  40005c:	d5 04 40 00 d5 04 40 00 00 00 00 00 fd 02 40 00     ..@...@.......@.
  40006c:	11 03 40 00 25 03 40 00 d5 04 40 00 d5 04 40 00     ..@.%.@...@...@.
  40007c:	d5 04 40 00 39 03 40 00 4d 03 40 00 d5 04 40 00     ..@.9.@.M.@...@.
  40008c:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  40009c:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  4000ac:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  4000bc:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  4000cc:	d5 04 40 00 00 00 00 00 d5 04 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  4000ec:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  4000fc:	d5 04 40 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ..@...@...@...@.
  40010c:	d5 04 40 00 d5 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d5 04 40 00 d5 04 40 00 d5 04 40 00     ......@...@...@.
  40012c:	d5 04 40 00 d5 04 40 00 00 00 00 00 d5 04 40 00     ..@...@.......@.
  40013c:	d5 04 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040043c 	.word	0x2040043c
  40015c:	00000000 	.word	0x00000000
  400160:	00400994 	.word	0x00400994

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400994 	.word	0x00400994
  4001a0:	20400440 	.word	0x20400440
  4001a4:	00400994 	.word	0x00400994
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004006ad 	.word	0x004006ad
  4001f8:	004003fd 	.word	0x004003fd
  4001fc:	00400451 	.word	0x00400451
  400200:	00400461 	.word	0x00400461
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400471 	.word	0x00400471
  400210:	00400361 	.word	0x00400361
  400214:	00400399 	.word	0x00400399
  400218:	004005a1 	.word	0x004005a1

0040021c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40021c:	b90a      	cbnz	r2, 400222 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40021e:	6601      	str	r1, [r0, #96]	; 0x60
  400220:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400222:	6641      	str	r1, [r0, #100]	; 0x64
  400224:	4770      	bx	lr

00400226 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400226:	6341      	str	r1, [r0, #52]	; 0x34
  400228:	4770      	bx	lr

0040022a <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40022a:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  40022e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400232:	d105      	bne.n	400240 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400234:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400236:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400238:	bf14      	ite	ne
  40023a:	2001      	movne	r0, #1
  40023c:	2000      	moveq	r0, #0
  40023e:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400240:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400242:	e7f8      	b.n	400236 <pio_get+0xc>

00400244 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400244:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400246:	f012 0f01 	tst.w	r2, #1
  40024a:	d10d      	bne.n	400268 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40024c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40024e:	f012 0f0a 	tst.w	r2, #10
  400252:	d00b      	beq.n	40026c <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400254:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400256:	f012 0f02 	tst.w	r2, #2
  40025a:	d109      	bne.n	400270 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40025c:	f012 0f08 	tst.w	r2, #8
  400260:	d008      	beq.n	400274 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400262:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400266:	e005      	b.n	400274 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400268:	6641      	str	r1, [r0, #100]	; 0x64
  40026a:	e7f0      	b.n	40024e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40026c:	6241      	str	r1, [r0, #36]	; 0x24
  40026e:	e7f2      	b.n	400256 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400270:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400274:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400276:	6001      	str	r1, [r0, #0]
  400278:	4770      	bx	lr

0040027a <pio_set_output>:
{
  40027a:	b410      	push	{r4}
  40027c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40027e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400280:	b94c      	cbnz	r4, 400296 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400282:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400284:	b14b      	cbz	r3, 40029a <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400286:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400288:	b94a      	cbnz	r2, 40029e <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40028a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40028c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40028e:	6001      	str	r1, [r0, #0]
}
  400290:	f85d 4b04 	ldr.w	r4, [sp], #4
  400294:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400296:	6641      	str	r1, [r0, #100]	; 0x64
  400298:	e7f4      	b.n	400284 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40029a:	6541      	str	r1, [r0, #84]	; 0x54
  40029c:	e7f4      	b.n	400288 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40029e:	6301      	str	r1, [r0, #48]	; 0x30
  4002a0:	e7f4      	b.n	40028c <pio_set_output+0x12>

004002a2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002a4:	4770      	bx	lr

004002a6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002a8:	4770      	bx	lr
	...

004002ac <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4002ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b0:	4604      	mov	r4, r0
  4002b2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4002b4:	4b0e      	ldr	r3, [pc, #56]	; (4002f0 <pio_handler_process+0x44>)
  4002b6:	4798      	blx	r3
  4002b8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4002ba:	4620      	mov	r0, r4
  4002bc:	4b0d      	ldr	r3, [pc, #52]	; (4002f4 <pio_handler_process+0x48>)
  4002be:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4002c0:	4005      	ands	r5, r0
  4002c2:	d013      	beq.n	4002ec <pio_handler_process+0x40>
  4002c4:	4c0c      	ldr	r4, [pc, #48]	; (4002f8 <pio_handler_process+0x4c>)
  4002c6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4002ca:	e003      	b.n	4002d4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4002cc:	42b4      	cmp	r4, r6
  4002ce:	d00d      	beq.n	4002ec <pio_handler_process+0x40>
  4002d0:	3410      	adds	r4, #16
		while (status != 0) {
  4002d2:	b15d      	cbz	r5, 4002ec <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4002d4:	6820      	ldr	r0, [r4, #0]
  4002d6:	4540      	cmp	r0, r8
  4002d8:	d1f8      	bne.n	4002cc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4002da:	6861      	ldr	r1, [r4, #4]
  4002dc:	4229      	tst	r1, r5
  4002de:	d0f5      	beq.n	4002cc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4002e0:	68e3      	ldr	r3, [r4, #12]
  4002e2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4002e4:	6863      	ldr	r3, [r4, #4]
  4002e6:	ea25 0503 	bic.w	r5, r5, r3
  4002ea:	e7ef      	b.n	4002cc <pio_handler_process+0x20>
  4002ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002f0:	004002a3 	.word	0x004002a3
  4002f4:	004002a7 	.word	0x004002a7
  4002f8:	20400458 	.word	0x20400458

004002fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4002fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4002fe:	210a      	movs	r1, #10
  400300:	4801      	ldr	r0, [pc, #4]	; (400308 <PIOA_Handler+0xc>)
  400302:	4b02      	ldr	r3, [pc, #8]	; (40030c <PIOA_Handler+0x10>)
  400304:	4798      	blx	r3
  400306:	bd08      	pop	{r3, pc}
  400308:	400e0e00 	.word	0x400e0e00
  40030c:	004002ad 	.word	0x004002ad

00400310 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400310:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400312:	210b      	movs	r1, #11
  400314:	4801      	ldr	r0, [pc, #4]	; (40031c <PIOB_Handler+0xc>)
  400316:	4b02      	ldr	r3, [pc, #8]	; (400320 <PIOB_Handler+0x10>)
  400318:	4798      	blx	r3
  40031a:	bd08      	pop	{r3, pc}
  40031c:	400e1000 	.word	0x400e1000
  400320:	004002ad 	.word	0x004002ad

00400324 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400324:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400326:	210c      	movs	r1, #12
  400328:	4801      	ldr	r0, [pc, #4]	; (400330 <PIOC_Handler+0xc>)
  40032a:	4b02      	ldr	r3, [pc, #8]	; (400334 <PIOC_Handler+0x10>)
  40032c:	4798      	blx	r3
  40032e:	bd08      	pop	{r3, pc}
  400330:	400e1200 	.word	0x400e1200
  400334:	004002ad 	.word	0x004002ad

00400338 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400338:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40033a:	2110      	movs	r1, #16
  40033c:	4801      	ldr	r0, [pc, #4]	; (400344 <PIOD_Handler+0xc>)
  40033e:	4b02      	ldr	r3, [pc, #8]	; (400348 <PIOD_Handler+0x10>)
  400340:	4798      	blx	r3
  400342:	bd08      	pop	{r3, pc}
  400344:	400e1400 	.word	0x400e1400
  400348:	004002ad 	.word	0x004002ad

0040034c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40034c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40034e:	2111      	movs	r1, #17
  400350:	4801      	ldr	r0, [pc, #4]	; (400358 <PIOE_Handler+0xc>)
  400352:	4b02      	ldr	r3, [pc, #8]	; (40035c <PIOE_Handler+0x10>)
  400354:	4798      	blx	r3
  400356:	bd08      	pop	{r3, pc}
  400358:	400e1600 	.word	0x400e1600
  40035c:	004002ad 	.word	0x004002ad

00400360 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400360:	2803      	cmp	r0, #3
  400362:	d011      	beq.n	400388 <pmc_mck_set_division+0x28>
  400364:	2804      	cmp	r0, #4
  400366:	d012      	beq.n	40038e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400368:	2802      	cmp	r0, #2
  40036a:	bf0c      	ite	eq
  40036c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400370:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400372:	4a08      	ldr	r2, [pc, #32]	; (400394 <pmc_mck_set_division+0x34>)
  400374:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40037a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40037c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40037e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400380:	f013 0f08 	tst.w	r3, #8
  400384:	d0fb      	beq.n	40037e <pmc_mck_set_division+0x1e>
}
  400386:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400388:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40038c:	e7f1      	b.n	400372 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40038e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400392:	e7ee      	b.n	400372 <pmc_mck_set_division+0x12>
  400394:	400e0600 	.word	0x400e0600

00400398 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400398:	4a17      	ldr	r2, [pc, #92]	; (4003f8 <pmc_switch_mck_to_pllack+0x60>)
  40039a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40039c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003a0:	4318      	orrs	r0, r3
  4003a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003a6:	f013 0f08 	tst.w	r3, #8
  4003aa:	d10a      	bne.n	4003c2 <pmc_switch_mck_to_pllack+0x2a>
  4003ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003b0:	4911      	ldr	r1, [pc, #68]	; (4003f8 <pmc_switch_mck_to_pllack+0x60>)
  4003b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003b4:	f012 0f08 	tst.w	r2, #8
  4003b8:	d103      	bne.n	4003c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003ba:	3b01      	subs	r3, #1
  4003bc:	d1f9      	bne.n	4003b2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4003be:	2001      	movs	r0, #1
  4003c0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4003c2:	4a0d      	ldr	r2, [pc, #52]	; (4003f8 <pmc_switch_mck_to_pllack+0x60>)
  4003c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003c6:	f023 0303 	bic.w	r3, r3, #3
  4003ca:	f043 0302 	orr.w	r3, r3, #2
  4003ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003d2:	f013 0f08 	tst.w	r3, #8
  4003d6:	d10a      	bne.n	4003ee <pmc_switch_mck_to_pllack+0x56>
  4003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003dc:	4906      	ldr	r1, [pc, #24]	; (4003f8 <pmc_switch_mck_to_pllack+0x60>)
  4003de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003e0:	f012 0f08 	tst.w	r2, #8
  4003e4:	d105      	bne.n	4003f2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003e6:	3b01      	subs	r3, #1
  4003e8:	d1f9      	bne.n	4003de <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4003ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003ec:	4770      	bx	lr
	return 0;
  4003ee:	2000      	movs	r0, #0
  4003f0:	4770      	bx	lr
  4003f2:	2000      	movs	r0, #0
  4003f4:	4770      	bx	lr
  4003f6:	bf00      	nop
  4003f8:	400e0600 	.word	0x400e0600

004003fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4003fc:	b9a0      	cbnz	r0, 400428 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4003fe:	480e      	ldr	r0, [pc, #56]	; (400438 <pmc_switch_mainck_to_xtal+0x3c>)
  400400:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400402:	0209      	lsls	r1, r1, #8
  400404:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400406:	4a0d      	ldr	r2, [pc, #52]	; (40043c <pmc_switch_mainck_to_xtal+0x40>)
  400408:	401a      	ands	r2, r3
  40040a:	4b0d      	ldr	r3, [pc, #52]	; (400440 <pmc_switch_mainck_to_xtal+0x44>)
  40040c:	4313      	orrs	r3, r2
  40040e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400410:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400412:	4602      	mov	r2, r0
  400414:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400416:	f013 0f01 	tst.w	r3, #1
  40041a:	d0fb      	beq.n	400414 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40041c:	4a06      	ldr	r2, [pc, #24]	; (400438 <pmc_switch_mainck_to_xtal+0x3c>)
  40041e:	6a11      	ldr	r1, [r2, #32]
  400420:	4b08      	ldr	r3, [pc, #32]	; (400444 <pmc_switch_mainck_to_xtal+0x48>)
  400422:	430b      	orrs	r3, r1
  400424:	6213      	str	r3, [r2, #32]
  400426:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400428:	4903      	ldr	r1, [pc, #12]	; (400438 <pmc_switch_mainck_to_xtal+0x3c>)
  40042a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40042c:	4a06      	ldr	r2, [pc, #24]	; (400448 <pmc_switch_mainck_to_xtal+0x4c>)
  40042e:	401a      	ands	r2, r3
  400430:	4b06      	ldr	r3, [pc, #24]	; (40044c <pmc_switch_mainck_to_xtal+0x50>)
  400432:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400434:	620b      	str	r3, [r1, #32]
  400436:	4770      	bx	lr
  400438:	400e0600 	.word	0x400e0600
  40043c:	ffc8fffc 	.word	0xffc8fffc
  400440:	00370001 	.word	0x00370001
  400444:	01370000 	.word	0x01370000
  400448:	fec8fffc 	.word	0xfec8fffc
  40044c:	01370002 	.word	0x01370002

00400450 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400450:	4b02      	ldr	r3, [pc, #8]	; (40045c <pmc_osc_is_ready_mainck+0xc>)
  400452:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400454:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e0600 	.word	0x400e0600

00400460 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400460:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400464:	4b01      	ldr	r3, [pc, #4]	; (40046c <pmc_disable_pllack+0xc>)
  400466:	629a      	str	r2, [r3, #40]	; 0x28
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	400e0600 	.word	0x400e0600

00400470 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <pmc_is_locked_pllack+0xc>)
  400472:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400474:	f000 0002 	and.w	r0, r0, #2
  400478:	4770      	bx	lr
  40047a:	bf00      	nop
  40047c:	400e0600 	.word	0x400e0600

00400480 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400480:	283f      	cmp	r0, #63	; 0x3f
  400482:	d81e      	bhi.n	4004c2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400484:	281f      	cmp	r0, #31
  400486:	d80c      	bhi.n	4004a2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400488:	4b11      	ldr	r3, [pc, #68]	; (4004d0 <pmc_enable_periph_clk+0x50>)
  40048a:	699a      	ldr	r2, [r3, #24]
  40048c:	2301      	movs	r3, #1
  40048e:	4083      	lsls	r3, r0
  400490:	4393      	bics	r3, r2
  400492:	d018      	beq.n	4004c6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400494:	2301      	movs	r3, #1
  400496:	fa03 f000 	lsl.w	r0, r3, r0
  40049a:	4b0d      	ldr	r3, [pc, #52]	; (4004d0 <pmc_enable_periph_clk+0x50>)
  40049c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40049e:	2000      	movs	r0, #0
  4004a0:	4770      	bx	lr
		ul_id -= 32;
  4004a2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4004a4:	4b0a      	ldr	r3, [pc, #40]	; (4004d0 <pmc_enable_periph_clk+0x50>)
  4004a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4004aa:	2301      	movs	r3, #1
  4004ac:	4083      	lsls	r3, r0
  4004ae:	4393      	bics	r3, r2
  4004b0:	d00b      	beq.n	4004ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4004b2:	2301      	movs	r3, #1
  4004b4:	fa03 f000 	lsl.w	r0, r3, r0
  4004b8:	4b05      	ldr	r3, [pc, #20]	; (4004d0 <pmc_enable_periph_clk+0x50>)
  4004ba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4004be:	2000      	movs	r0, #0
  4004c0:	4770      	bx	lr
		return 1;
  4004c2:	2001      	movs	r0, #1
  4004c4:	4770      	bx	lr
	return 0;
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
  4004ca:	2000      	movs	r0, #0
}
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0600 	.word	0x400e0600

004004d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004d4:	e7fe      	b.n	4004d4 <Dummy_Handler>
	...

004004d8 <Reset_Handler>:
{
  4004d8:	b500      	push	{lr}
  4004da:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4004dc:	4b25      	ldr	r3, [pc, #148]	; (400574 <Reset_Handler+0x9c>)
  4004de:	4a26      	ldr	r2, [pc, #152]	; (400578 <Reset_Handler+0xa0>)
  4004e0:	429a      	cmp	r2, r3
  4004e2:	d010      	beq.n	400506 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4004e4:	4b25      	ldr	r3, [pc, #148]	; (40057c <Reset_Handler+0xa4>)
  4004e6:	4a23      	ldr	r2, [pc, #140]	; (400574 <Reset_Handler+0x9c>)
  4004e8:	429a      	cmp	r2, r3
  4004ea:	d20c      	bcs.n	400506 <Reset_Handler+0x2e>
  4004ec:	3b01      	subs	r3, #1
  4004ee:	1a9b      	subs	r3, r3, r2
  4004f0:	f023 0303 	bic.w	r3, r3, #3
  4004f4:	3304      	adds	r3, #4
  4004f6:	4413      	add	r3, r2
  4004f8:	491f      	ldr	r1, [pc, #124]	; (400578 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4004fa:	f851 0b04 	ldr.w	r0, [r1], #4
  4004fe:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400502:	429a      	cmp	r2, r3
  400504:	d1f9      	bne.n	4004fa <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400506:	4b1e      	ldr	r3, [pc, #120]	; (400580 <Reset_Handler+0xa8>)
  400508:	4a1e      	ldr	r2, [pc, #120]	; (400584 <Reset_Handler+0xac>)
  40050a:	429a      	cmp	r2, r3
  40050c:	d20a      	bcs.n	400524 <Reset_Handler+0x4c>
  40050e:	3b01      	subs	r3, #1
  400510:	1a9b      	subs	r3, r3, r2
  400512:	f023 0303 	bic.w	r3, r3, #3
  400516:	3304      	adds	r3, #4
  400518:	4413      	add	r3, r2
                *pDest++ = 0;
  40051a:	2100      	movs	r1, #0
  40051c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400520:	4293      	cmp	r3, r2
  400522:	d1fb      	bne.n	40051c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400524:	4a18      	ldr	r2, [pc, #96]	; (400588 <Reset_Handler+0xb0>)
  400526:	4b19      	ldr	r3, [pc, #100]	; (40058c <Reset_Handler+0xb4>)
  400528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40052c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40052e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400532:	fab3 f383 	clz	r3, r3
  400536:	095b      	lsrs	r3, r3, #5
  400538:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40053a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40053c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400540:	2200      	movs	r2, #0
  400542:	4b13      	ldr	r3, [pc, #76]	; (400590 <Reset_Handler+0xb8>)
  400544:	701a      	strb	r2, [r3, #0]
	return flags;
  400546:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400548:	4a12      	ldr	r2, [pc, #72]	; (400594 <Reset_Handler+0xbc>)
  40054a:	6813      	ldr	r3, [r2, #0]
  40054c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400550:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400556:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40055a:	b129      	cbz	r1, 400568 <Reset_Handler+0x90>
		cpu_irq_enable();
  40055c:	2201      	movs	r2, #1
  40055e:	4b0c      	ldr	r3, [pc, #48]	; (400590 <Reset_Handler+0xb8>)
  400560:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400562:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400566:	b662      	cpsie	i
        __libc_init_array();
  400568:	4b0b      	ldr	r3, [pc, #44]	; (400598 <Reset_Handler+0xc0>)
  40056a:	4798      	blx	r3
        main();
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <Reset_Handler+0xc4>)
  40056e:	4798      	blx	r3
  400570:	e7fe      	b.n	400570 <Reset_Handler+0x98>
  400572:	bf00      	nop
  400574:	20400000 	.word	0x20400000
  400578:	00400994 	.word	0x00400994
  40057c:	2040043c 	.word	0x2040043c
  400580:	204004ec 	.word	0x204004ec
  400584:	2040043c 	.word	0x2040043c
  400588:	e000ed00 	.word	0xe000ed00
  40058c:	00400000 	.word	0x00400000
  400590:	2040000a 	.word	0x2040000a
  400594:	e000ed88 	.word	0xe000ed88
  400598:	004007fd 	.word	0x004007fd
  40059c:	0040078d 	.word	0x0040078d

004005a0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4005a0:	4b3b      	ldr	r3, [pc, #236]	; (400690 <SystemCoreClockUpdate+0xf0>)
  4005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a4:	f003 0303 	and.w	r3, r3, #3
  4005a8:	2b01      	cmp	r3, #1
  4005aa:	d01d      	beq.n	4005e8 <SystemCoreClockUpdate+0x48>
  4005ac:	b183      	cbz	r3, 4005d0 <SystemCoreClockUpdate+0x30>
  4005ae:	2b02      	cmp	r3, #2
  4005b0:	d036      	beq.n	400620 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4005b2:	4b37      	ldr	r3, [pc, #220]	; (400690 <SystemCoreClockUpdate+0xf0>)
  4005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005ba:	2b70      	cmp	r3, #112	; 0x70
  4005bc:	d05f      	beq.n	40067e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4005be:	4b34      	ldr	r3, [pc, #208]	; (400690 <SystemCoreClockUpdate+0xf0>)
  4005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4005c2:	4934      	ldr	r1, [pc, #208]	; (400694 <SystemCoreClockUpdate+0xf4>)
  4005c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4005c8:	680b      	ldr	r3, [r1, #0]
  4005ca:	40d3      	lsrs	r3, r2
  4005cc:	600b      	str	r3, [r1, #0]
  4005ce:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4005d0:	4b31      	ldr	r3, [pc, #196]	; (400698 <SystemCoreClockUpdate+0xf8>)
  4005d2:	695b      	ldr	r3, [r3, #20]
  4005d4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4005d8:	bf14      	ite	ne
  4005da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4005de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4005e2:	4b2c      	ldr	r3, [pc, #176]	; (400694 <SystemCoreClockUpdate+0xf4>)
  4005e4:	601a      	str	r2, [r3, #0]
  4005e6:	e7e4      	b.n	4005b2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4005e8:	4b29      	ldr	r3, [pc, #164]	; (400690 <SystemCoreClockUpdate+0xf0>)
  4005ea:	6a1b      	ldr	r3, [r3, #32]
  4005ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005f0:	d003      	beq.n	4005fa <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4005f2:	4a2a      	ldr	r2, [pc, #168]	; (40069c <SystemCoreClockUpdate+0xfc>)
  4005f4:	4b27      	ldr	r3, [pc, #156]	; (400694 <SystemCoreClockUpdate+0xf4>)
  4005f6:	601a      	str	r2, [r3, #0]
  4005f8:	e7db      	b.n	4005b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005fa:	4a29      	ldr	r2, [pc, #164]	; (4006a0 <SystemCoreClockUpdate+0x100>)
  4005fc:	4b25      	ldr	r3, [pc, #148]	; (400694 <SystemCoreClockUpdate+0xf4>)
  4005fe:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400600:	4b23      	ldr	r3, [pc, #140]	; (400690 <SystemCoreClockUpdate+0xf0>)
  400602:	6a1b      	ldr	r3, [r3, #32]
  400604:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400608:	2b10      	cmp	r3, #16
  40060a:	d005      	beq.n	400618 <SystemCoreClockUpdate+0x78>
  40060c:	2b20      	cmp	r3, #32
  40060e:	d1d0      	bne.n	4005b2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400610:	4a22      	ldr	r2, [pc, #136]	; (40069c <SystemCoreClockUpdate+0xfc>)
  400612:	4b20      	ldr	r3, [pc, #128]	; (400694 <SystemCoreClockUpdate+0xf4>)
  400614:	601a      	str	r2, [r3, #0]
          break;
  400616:	e7cc      	b.n	4005b2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400618:	4a22      	ldr	r2, [pc, #136]	; (4006a4 <SystemCoreClockUpdate+0x104>)
  40061a:	4b1e      	ldr	r3, [pc, #120]	; (400694 <SystemCoreClockUpdate+0xf4>)
  40061c:	601a      	str	r2, [r3, #0]
          break;
  40061e:	e7c8      	b.n	4005b2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400620:	4b1b      	ldr	r3, [pc, #108]	; (400690 <SystemCoreClockUpdate+0xf0>)
  400622:	6a1b      	ldr	r3, [r3, #32]
  400624:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400628:	d016      	beq.n	400658 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40062a:	4a1c      	ldr	r2, [pc, #112]	; (40069c <SystemCoreClockUpdate+0xfc>)
  40062c:	4b19      	ldr	r3, [pc, #100]	; (400694 <SystemCoreClockUpdate+0xf4>)
  40062e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400630:	4b17      	ldr	r3, [pc, #92]	; (400690 <SystemCoreClockUpdate+0xf0>)
  400632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400634:	f003 0303 	and.w	r3, r3, #3
  400638:	2b02      	cmp	r3, #2
  40063a:	d1ba      	bne.n	4005b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40063c:	4a14      	ldr	r2, [pc, #80]	; (400690 <SystemCoreClockUpdate+0xf0>)
  40063e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400640:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400642:	4814      	ldr	r0, [pc, #80]	; (400694 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400644:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400648:	6803      	ldr	r3, [r0, #0]
  40064a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40064e:	b2d2      	uxtb	r2, r2
  400650:	fbb3 f3f2 	udiv	r3, r3, r2
  400654:	6003      	str	r3, [r0, #0]
  400656:	e7ac      	b.n	4005b2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400658:	4a11      	ldr	r2, [pc, #68]	; (4006a0 <SystemCoreClockUpdate+0x100>)
  40065a:	4b0e      	ldr	r3, [pc, #56]	; (400694 <SystemCoreClockUpdate+0xf4>)
  40065c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40065e:	4b0c      	ldr	r3, [pc, #48]	; (400690 <SystemCoreClockUpdate+0xf0>)
  400660:	6a1b      	ldr	r3, [r3, #32]
  400662:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400666:	2b10      	cmp	r3, #16
  400668:	d005      	beq.n	400676 <SystemCoreClockUpdate+0xd6>
  40066a:	2b20      	cmp	r3, #32
  40066c:	d1e0      	bne.n	400630 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40066e:	4a0b      	ldr	r2, [pc, #44]	; (40069c <SystemCoreClockUpdate+0xfc>)
  400670:	4b08      	ldr	r3, [pc, #32]	; (400694 <SystemCoreClockUpdate+0xf4>)
  400672:	601a      	str	r2, [r3, #0]
          break;
  400674:	e7dc      	b.n	400630 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400676:	4a0b      	ldr	r2, [pc, #44]	; (4006a4 <SystemCoreClockUpdate+0x104>)
  400678:	4b06      	ldr	r3, [pc, #24]	; (400694 <SystemCoreClockUpdate+0xf4>)
  40067a:	601a      	str	r2, [r3, #0]
          break;
  40067c:	e7d8      	b.n	400630 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40067e:	4a05      	ldr	r2, [pc, #20]	; (400694 <SystemCoreClockUpdate+0xf4>)
  400680:	6813      	ldr	r3, [r2, #0]
  400682:	4909      	ldr	r1, [pc, #36]	; (4006a8 <SystemCoreClockUpdate+0x108>)
  400684:	fba1 1303 	umull	r1, r3, r1, r3
  400688:	085b      	lsrs	r3, r3, #1
  40068a:	6013      	str	r3, [r2, #0]
  40068c:	4770      	bx	lr
  40068e:	bf00      	nop
  400690:	400e0600 	.word	0x400e0600
  400694:	2040000c 	.word	0x2040000c
  400698:	400e1810 	.word	0x400e1810
  40069c:	00b71b00 	.word	0x00b71b00
  4006a0:	003d0900 	.word	0x003d0900
  4006a4:	007a1200 	.word	0x007a1200
  4006a8:	aaaaaaab 	.word	0xaaaaaaab

004006ac <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4006ac:	4b12      	ldr	r3, [pc, #72]	; (4006f8 <system_init_flash+0x4c>)
  4006ae:	4298      	cmp	r0, r3
  4006b0:	d911      	bls.n	4006d6 <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4006b2:	4b12      	ldr	r3, [pc, #72]	; (4006fc <system_init_flash+0x50>)
  4006b4:	4298      	cmp	r0, r3
  4006b6:	d913      	bls.n	4006e0 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4006b8:	4b11      	ldr	r3, [pc, #68]	; (400700 <system_init_flash+0x54>)
  4006ba:	4298      	cmp	r0, r3
  4006bc:	d914      	bls.n	4006e8 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4006be:	4b11      	ldr	r3, [pc, #68]	; (400704 <system_init_flash+0x58>)
  4006c0:	4298      	cmp	r0, r3
  4006c2:	d915      	bls.n	4006f0 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4006c4:	4b10      	ldr	r3, [pc, #64]	; (400708 <system_init_flash+0x5c>)
  4006c6:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4006c8:	bf94      	ite	ls
  4006ca:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4006ce:	4a0f      	ldrhi	r2, [pc, #60]	; (40070c <system_init_flash+0x60>)
  4006d0:	4b0f      	ldr	r3, [pc, #60]	; (400710 <system_init_flash+0x64>)
  4006d2:	601a      	str	r2, [r3, #0]
  4006d4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4006d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006da:	4b0d      	ldr	r3, [pc, #52]	; (400710 <system_init_flash+0x64>)
  4006dc:	601a      	str	r2, [r3, #0]
  4006de:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4006e0:	4a0c      	ldr	r2, [pc, #48]	; (400714 <system_init_flash+0x68>)
  4006e2:	4b0b      	ldr	r3, [pc, #44]	; (400710 <system_init_flash+0x64>)
  4006e4:	601a      	str	r2, [r3, #0]
  4006e6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4006e8:	4a0b      	ldr	r2, [pc, #44]	; (400718 <system_init_flash+0x6c>)
  4006ea:	4b09      	ldr	r3, [pc, #36]	; (400710 <system_init_flash+0x64>)
  4006ec:	601a      	str	r2, [r3, #0]
  4006ee:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4006f0:	4a0a      	ldr	r2, [pc, #40]	; (40071c <system_init_flash+0x70>)
  4006f2:	4b07      	ldr	r3, [pc, #28]	; (400710 <system_init_flash+0x64>)
  4006f4:	601a      	str	r2, [r3, #0]
  4006f6:	4770      	bx	lr
  4006f8:	01312cff 	.word	0x01312cff
  4006fc:	026259ff 	.word	0x026259ff
  400700:	039386ff 	.word	0x039386ff
  400704:	04c4b3ff 	.word	0x04c4b3ff
  400708:	05f5e0ff 	.word	0x05f5e0ff
  40070c:	04000500 	.word	0x04000500
  400710:	400e0c00 	.word	0x400e0c00
  400714:	04000100 	.word	0x04000100
  400718:	04000200 	.word	0x04000200
  40071c:	04000300 	.word	0x04000300

00400720 <init>:
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC
void init(void)
{
  400720:	b570      	push	{r4, r5, r6, lr}
  400722:	b082      	sub	sp, #8
	// Inicializa o board clock
	sysclk_init();
  400724:	4b11      	ldr	r3, [pc, #68]	; (40076c <init+0x4c>)
  400726:	4798      	blx	r3
	
	//Desativa o cão de guarda do timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  400728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40072c:	4b10      	ldr	r3, [pc, #64]	; (400770 <init+0x50>)
  40072e:	605a      	str	r2, [r3, #4]
	
	//Ativa o PIO na qual o LED foi conectado para que possamos controlar o LED
	pmc_enable_periph_clk(LED_PIO_ID);
  400730:	200c      	movs	r0, #12
  400732:	4d10      	ldr	r5, [pc, #64]	; (400774 <init+0x54>)
  400734:	47a8      	blx	r5
	
	//Inicializa PCB como saída
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  400736:	2400      	movs	r4, #0
  400738:	9400      	str	r4, [sp, #0]
  40073a:	4623      	mov	r3, r4
  40073c:	4622      	mov	r2, r4
  40073e:	f44f 7180 	mov.w	r1, #256	; 0x100
  400742:	480d      	ldr	r0, [pc, #52]	; (400778 <init+0x58>)
  400744:	4e0d      	ldr	r6, [pc, #52]	; (40077c <init+0x5c>)
  400746:	47b0      	blx	r6
	
	//Inicializa o PIO do botão
	pmc_enable_periph_clk((BUT_PIO_ID));
  400748:	200a      	movs	r0, #10
  40074a:	47a8      	blx	r5
	
	//inicializa PCB como entrada
	pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
  40074c:	4d0c      	ldr	r5, [pc, #48]	; (400780 <init+0x60>)
  40074e:	4622      	mov	r2, r4
  400750:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400754:	4628      	mov	r0, r5
  400756:	4b0b      	ldr	r3, [pc, #44]	; (400784 <init+0x64>)
  400758:	4798      	blx	r3
	
	//PULL-UP
	pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, 1);
  40075a:	2201      	movs	r2, #1
  40075c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400760:	4628      	mov	r0, r5
  400762:	4b09      	ldr	r3, [pc, #36]	; (400788 <init+0x68>)
  400764:	4798      	blx	r3
}
  400766:	b002      	add	sp, #8
  400768:	bd70      	pop	{r4, r5, r6, pc}
  40076a:	bf00      	nop
  40076c:	004001ad 	.word	0x004001ad
  400770:	400e1850 	.word	0x400e1850
  400774:	00400481 	.word	0x00400481
  400778:	400e1200 	.word	0x400e1200
  40077c:	0040027b 	.word	0x0040027b
  400780:	400e0e00 	.word	0x400e0e00
  400784:	00400245 	.word	0x00400245
  400788:	0040021d 	.word	0x0040021d

0040078c <main>:
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  40078c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //Inicializa sistema e IOs
  init();
  400790:	4b13      	ldr	r3, [pc, #76]	; (4007e0 <main+0x54>)
  400792:	4798      	blx	r3

  // super loop	
  // aplicacoes embarcadas não devem sair do while(1).
  while (1)
  {
	pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK); //Get do BUT_PIO
  400794:	4f13      	ldr	r7, [pc, #76]	; (4007e4 <main+0x58>)
	p_pio->PIO_SODR = ul_mask;
  400796:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4007f0 <main+0x64>
	
	if (!pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK)) {
		
		for (int i = 0; i<5; i++){
			_pio_set(PIOC, LED_PIO_IDX_MASK);	//coloca 1 no pino LED
			delay_ms(200);						//Delay por software de 200 ms
  40079a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4007f4 <main+0x68>
	pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK); //Get do BUT_PIO
  40079e:	f44f 6600 	mov.w	r6, #2048	; 0x800
  4007a2:	f04f 5520 	mov.w	r5, #671088640	; 0x28000000
  4007a6:	4632      	mov	r2, r6
  4007a8:	4629      	mov	r1, r5
  4007aa:	4638      	mov	r0, r7
  4007ac:	4c0e      	ldr	r4, [pc, #56]	; (4007e8 <main+0x5c>)
  4007ae:	47a0      	blx	r4
	if (!pio_get(BUT_PIO, PIO_INPUT, BUT_PIO_IDX_MASK)) {
  4007b0:	4632      	mov	r2, r6
  4007b2:	4629      	mov	r1, r5
  4007b4:	4638      	mov	r0, r7
  4007b6:	47a0      	blx	r4
  4007b8:	2800      	cmp	r0, #0
  4007ba:	d1f4      	bne.n	4007a6 <main+0x1a>
  4007bc:	2405      	movs	r4, #5
	p_pio->PIO_SODR = ul_mask;
  4007be:	f44f 7680 	mov.w	r6, #256	; 0x100
			delay_ms(200);						//Delay por software de 200 ms
  4007c2:	4d0a      	ldr	r5, [pc, #40]	; (4007ec <main+0x60>)
			pio_clear(PIOC, LED_PIO_IDX_MASK);	//Coloca 0 no pino do LED
  4007c4:	f8df a030 	ldr.w	sl, [pc, #48]	; 4007f8 <main+0x6c>
	p_pio->PIO_SODR = ul_mask;
  4007c8:	f8c9 6030 	str.w	r6, [r9, #48]	; 0x30
			delay_ms(200);						//Delay por software de 200 ms
  4007cc:	4640      	mov	r0, r8
  4007ce:	47a8      	blx	r5
			pio_clear(PIOC, LED_PIO_IDX_MASK);	//Coloca 0 no pino do LED
  4007d0:	4631      	mov	r1, r6
  4007d2:	4648      	mov	r0, r9
  4007d4:	47d0      	blx	sl
			delay_ms(200);						//Delay por software de 200 ms	
  4007d6:	4640      	mov	r0, r8
  4007d8:	47a8      	blx	r5
		for (int i = 0; i<5; i++){
  4007da:	3c01      	subs	r4, #1
  4007dc:	d1f4      	bne.n	4007c8 <main+0x3c>
  4007de:	e7de      	b.n	40079e <main+0x12>
  4007e0:	00400721 	.word	0x00400721
  4007e4:	400e0e00 	.word	0x400e0e00
  4007e8:	0040022b 	.word	0x0040022b
  4007ec:	20400001 	.word	0x20400001
  4007f0:	400e1200 	.word	0x400e1200
  4007f4:	009a5649 	.word	0x009a5649
  4007f8:	00400227 	.word	0x00400227

004007fc <__libc_init_array>:
  4007fc:	b570      	push	{r4, r5, r6, lr}
  4007fe:	4e0f      	ldr	r6, [pc, #60]	; (40083c <__libc_init_array+0x40>)
  400800:	4d0f      	ldr	r5, [pc, #60]	; (400840 <__libc_init_array+0x44>)
  400802:	1b76      	subs	r6, r6, r5
  400804:	10b6      	asrs	r6, r6, #2
  400806:	bf18      	it	ne
  400808:	2400      	movne	r4, #0
  40080a:	d005      	beq.n	400818 <__libc_init_array+0x1c>
  40080c:	3401      	adds	r4, #1
  40080e:	f855 3b04 	ldr.w	r3, [r5], #4
  400812:	4798      	blx	r3
  400814:	42a6      	cmp	r6, r4
  400816:	d1f9      	bne.n	40080c <__libc_init_array+0x10>
  400818:	4e0a      	ldr	r6, [pc, #40]	; (400844 <__libc_init_array+0x48>)
  40081a:	4d0b      	ldr	r5, [pc, #44]	; (400848 <__libc_init_array+0x4c>)
  40081c:	1b76      	subs	r6, r6, r5
  40081e:	f000 f8a7 	bl	400970 <_init>
  400822:	10b6      	asrs	r6, r6, #2
  400824:	bf18      	it	ne
  400826:	2400      	movne	r4, #0
  400828:	d006      	beq.n	400838 <__libc_init_array+0x3c>
  40082a:	3401      	adds	r4, #1
  40082c:	f855 3b04 	ldr.w	r3, [r5], #4
  400830:	4798      	blx	r3
  400832:	42a6      	cmp	r6, r4
  400834:	d1f9      	bne.n	40082a <__libc_init_array+0x2e>
  400836:	bd70      	pop	{r4, r5, r6, pc}
  400838:	bd70      	pop	{r4, r5, r6, pc}
  40083a:	bf00      	nop
  40083c:	0040097c 	.word	0x0040097c
  400840:	0040097c 	.word	0x0040097c
  400844:	00400984 	.word	0x00400984
  400848:	0040097c 	.word	0x0040097c

0040084c <register_fini>:
  40084c:	4b02      	ldr	r3, [pc, #8]	; (400858 <register_fini+0xc>)
  40084e:	b113      	cbz	r3, 400856 <register_fini+0xa>
  400850:	4802      	ldr	r0, [pc, #8]	; (40085c <register_fini+0x10>)
  400852:	f000 b805 	b.w	400860 <atexit>
  400856:	4770      	bx	lr
  400858:	00000000 	.word	0x00000000
  40085c:	0040086d 	.word	0x0040086d

00400860 <atexit>:
  400860:	2300      	movs	r3, #0
  400862:	4601      	mov	r1, r0
  400864:	461a      	mov	r2, r3
  400866:	4618      	mov	r0, r3
  400868:	f000 b81e 	b.w	4008a8 <__register_exitproc>

0040086c <__libc_fini_array>:
  40086c:	b538      	push	{r3, r4, r5, lr}
  40086e:	4c0a      	ldr	r4, [pc, #40]	; (400898 <__libc_fini_array+0x2c>)
  400870:	4d0a      	ldr	r5, [pc, #40]	; (40089c <__libc_fini_array+0x30>)
  400872:	1b64      	subs	r4, r4, r5
  400874:	10a4      	asrs	r4, r4, #2
  400876:	d00a      	beq.n	40088e <__libc_fini_array+0x22>
  400878:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40087c:	3b01      	subs	r3, #1
  40087e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400882:	3c01      	subs	r4, #1
  400884:	f855 3904 	ldr.w	r3, [r5], #-4
  400888:	4798      	blx	r3
  40088a:	2c00      	cmp	r4, #0
  40088c:	d1f9      	bne.n	400882 <__libc_fini_array+0x16>
  40088e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400892:	f000 b877 	b.w	400984 <_fini>
  400896:	bf00      	nop
  400898:	00400994 	.word	0x00400994
  40089c:	00400990 	.word	0x00400990

004008a0 <__retarget_lock_acquire_recursive>:
  4008a0:	4770      	bx	lr
  4008a2:	bf00      	nop

004008a4 <__retarget_lock_release_recursive>:
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop

004008a8 <__register_exitproc>:
  4008a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008ac:	4d2c      	ldr	r5, [pc, #176]	; (400960 <__register_exitproc+0xb8>)
  4008ae:	4606      	mov	r6, r0
  4008b0:	6828      	ldr	r0, [r5, #0]
  4008b2:	4698      	mov	r8, r3
  4008b4:	460f      	mov	r7, r1
  4008b6:	4691      	mov	r9, r2
  4008b8:	f7ff fff2 	bl	4008a0 <__retarget_lock_acquire_recursive>
  4008bc:	4b29      	ldr	r3, [pc, #164]	; (400964 <__register_exitproc+0xbc>)
  4008be:	681c      	ldr	r4, [r3, #0]
  4008c0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4008c4:	2b00      	cmp	r3, #0
  4008c6:	d03e      	beq.n	400946 <__register_exitproc+0x9e>
  4008c8:	685a      	ldr	r2, [r3, #4]
  4008ca:	2a1f      	cmp	r2, #31
  4008cc:	dc1c      	bgt.n	400908 <__register_exitproc+0x60>
  4008ce:	f102 0e01 	add.w	lr, r2, #1
  4008d2:	b176      	cbz	r6, 4008f2 <__register_exitproc+0x4a>
  4008d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4008d8:	2401      	movs	r4, #1
  4008da:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4008de:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4008e2:	4094      	lsls	r4, r2
  4008e4:	4320      	orrs	r0, r4
  4008e6:	2e02      	cmp	r6, #2
  4008e8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4008ec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4008f0:	d023      	beq.n	40093a <__register_exitproc+0x92>
  4008f2:	3202      	adds	r2, #2
  4008f4:	f8c3 e004 	str.w	lr, [r3, #4]
  4008f8:	6828      	ldr	r0, [r5, #0]
  4008fa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4008fe:	f7ff ffd1 	bl	4008a4 <__retarget_lock_release_recursive>
  400902:	2000      	movs	r0, #0
  400904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400908:	4b17      	ldr	r3, [pc, #92]	; (400968 <__register_exitproc+0xc0>)
  40090a:	b30b      	cbz	r3, 400950 <__register_exitproc+0xa8>
  40090c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400910:	f3af 8000 	nop.w
  400914:	4603      	mov	r3, r0
  400916:	b1d8      	cbz	r0, 400950 <__register_exitproc+0xa8>
  400918:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40091c:	6002      	str	r2, [r0, #0]
  40091e:	2100      	movs	r1, #0
  400920:	6041      	str	r1, [r0, #4]
  400922:	460a      	mov	r2, r1
  400924:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400928:	f04f 0e01 	mov.w	lr, #1
  40092c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400930:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400934:	2e00      	cmp	r6, #0
  400936:	d0dc      	beq.n	4008f2 <__register_exitproc+0x4a>
  400938:	e7cc      	b.n	4008d4 <__register_exitproc+0x2c>
  40093a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40093e:	430c      	orrs	r4, r1
  400940:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400944:	e7d5      	b.n	4008f2 <__register_exitproc+0x4a>
  400946:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40094a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40094e:	e7bb      	b.n	4008c8 <__register_exitproc+0x20>
  400950:	6828      	ldr	r0, [r5, #0]
  400952:	f7ff ffa7 	bl	4008a4 <__retarget_lock_release_recursive>
  400956:	f04f 30ff 	mov.w	r0, #4294967295
  40095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40095e:	bf00      	nop
  400960:	20400438 	.word	0x20400438
  400964:	0040096c 	.word	0x0040096c
  400968:	00000000 	.word	0x00000000

0040096c <_global_impure_ptr>:
  40096c:	20400010                                ..@ 

00400970 <_init>:
  400970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400972:	bf00      	nop
  400974:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400976:	bc08      	pop	{r3}
  400978:	469e      	mov	lr, r3
  40097a:	4770      	bx	lr

0040097c <__init_array_start>:
  40097c:	0040084d 	.word	0x0040084d

00400980 <__frame_dummy_init_array_entry>:
  400980:	00400165                                e.@.

00400984 <_fini>:
  400984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400986:	bf00      	nop
  400988:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40098a:	bc08      	pop	{r3}
  40098c:	469e      	mov	lr, r3
  40098e:	4770      	bx	lr

00400990 <__fini_array_start>:
  400990:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <impure_data>:
20400010:	0000 0000 02fc 2040 0364 2040 03cc 2040     ......@ d.@ ..@ 
	...
204000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400438 <__atexit_recursive_mutex>:
20400438:	04c8 2040                                   ..@ 
